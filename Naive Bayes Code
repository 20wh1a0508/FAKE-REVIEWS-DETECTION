from sklearn.naive_bayes import MultinomialNB
# Create a Pipeline with Vectorizer and Multinomial Naive Bayes Classifier
text_clf = Pipeline([
        ('vectorizer', CountVectorizer(ngram_range=(1, 2))),
        ('clf', MultinomialNB())
    ])

# Fit the Model and Evaluate
text_clf.fit(X_train, y_train)

# Predictions
y_pred = text_clf.predict(X_test)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

classification_rep = classification_report(y_test, y_pred)
print("Classification Report:\n", classification_rep)

# Print confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)
sns.heatmap(conf_matrix, annot=True, cmap='RdBu_r')

from sklearn.preprocessing import LabelEncoder

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Fit LabelEncoder to your target labels
label_encoder.fit(y_train)

# Transform target labels to numerical values
y_test_encoded = label_encoder.transform(y_test)

# Now y_test_encoded will contain numerical labels (0 and 1) instead of 'CG' and 'OR'

# Compute ROC curve and ROC area
fpr, tpr, _ = roc_curve(y_test_encoded, y_pred_probs)
roc_auc = auc(fpr, tpr)

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()


from sklearn.metrics import precision_recall_curve
import matplotlib.pyplot as plt

# Compute precision and recall for each class
precision_cg, recall_cg, _ = precision_recall_curve(y_test == 'CG', y_pred_probs)
precision_or, recall_or, _ = precision_recall_curve(y_test == 'OR', y_pred_probs)

# Plot precision-recall curve for class 'CG'
plt.figure(figsize=(8, 6))
plt.plot(recall_cg, precision_cg, color='blue', lw=2, label='Precision-Recall curve for class CG')

# Plot precision-recall curve for class 'OR'
plt.plot(recall_or, precision_or, color='green', lw=2, label='Precision-Recall curve for class OR')

# Add labels and title
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.legend(loc="lower left")
plt.show()
