d3=df[8635:8675].copy()
d3['predicted'] = d3['processed_text'].apply(lambda x: text_clf.predict([x])[0])

# Display the DataFrame
print(d3[['category', 'label', 'predicted']])

def train_model(df):
    X_train, y_train = df['processed_text'], df['label']

    text_clf = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('clf', RandomForestClassifier())])



    # Fit the Model and Evaluate
    text_clf.fit(X_train, y_train)

    return text_clf

def predict_class(text, model, preprocess_func):
    processed_text = preprocess_func(text)
    predicted_class = model.predict([processed_text])[0]
    return predicted_class


# Load Data
df = pd.read_csv('/content/fake reviews data.csv')
df['processed_text'] = df['text_'].apply(preprocess_text)

# Train the model
trained_model = train_model(df)


input_text = "Easy to use. Seems to be an easy way to make a smoothie for a small person."

# Predict class for the input text
predicted_class = predict_class(input_text, trained_model, preprocess_text)

# Print the predicted class
print("Predicted Class:", predicted_class)
